import shutil
import os

def modify_geo(out_file_name, shape_name, hub_center=None):
    # Modigy the geo file generated by FreeCAD to your needs.
    # out_file_name: Name of the final geo file.
    # shape_name: Name of the shape generated with FreeCAD.
    if hub_center != None:
        cx = hub_center[0]
        cy = hub_center[1]
        cz = hub_center[2]

    # Current directory.
    current_dir = os.getcwd()
    current_dir = current_dir + '/'

    # FreeCAD generates the geo file in /tmp.
    # Copy the geo file from /tmp to the current directory.
    shutil.copyfile('/tmp/shape2mesh.geo', current_dir + out_file_name + '.geoo')

    # Copy the brep file from /tmp to the current directory.
    brep = '/tmp/' + shape_name + '_Geometry.brep'
    shutil.copyfile(brep, current_dir + out_file_name + '.brep')

    # I forgot why I do this. There should be a reason.
    with open(current_dir + out_file_name + '.geoo', 'r') as inFile, open(out_file_name + '.geo', 'w') as outFile:
        for line in inFile:
            if line.strip():
                outFile.write(line)
    os.remove(out_file_name + '.geoo')

    # Open the geo file to read.
    with open(out_file_name + '.geo', 'r') as file :
        filedata = file.readlines()

    # Remove unnecessary lines.
    filedata = [line for line in filedata if not 'SaveAll' in line]
    filedata = [line for line in filedata if not 'Save' in line]
    filedata = [line for line in filedata if not 'Mesh  3' in line]
    filedata = [line for line in filedata if not 'Coherence' in line]
    filedata = [line for line in filedata if not 'Mesh.CharacteristicLengthMin' in line]
    filedata = [line for line in filedata if not 'Mesh.CharacteristicLengthMax' in line]
    filedata = [line for line in filedata if not 'Mesh.Optimize' in line]
    filedata = [line for line in filedata if not 'Mesh.OptimizeNetgen' in line]
    filedata = [line for line in filedata if not 'Mesh.High' in line]
    filedata = [line for line in filedata if not 'Geometry.Tolerance' in line]
    filedata = [line for line in filedata if not '//' in line]

    # Optional.
    # These are replacements for certain parameters and also additions. For example, I want Mesh.Format to be 1 not anything else.
    for i, line in enumerate(filedata):
        if 'Mesh.Format' in line:
            filedata[i] = 'Mesh.Format = 1;\n'
        if 'Mesh.Algorithm =' in line:
            filedata[i] = 'Mesh.Algorithm = 1;\n'
        if 'Mesh.Algorithm3D =' in line:
            filedata[i] = 'Mesh.Algorithm3D = 10;\n'
        if 'ElementOrder' in line:
            filedata[i] = 'Mesh.ElementOrder = 1;\n'
            filedata[i-1] = filedata[i-1] + '\n'
        if 'Save' in line:
            filedata[i] =  "Save \"" + out_file_name + ".msh\";"
        if 'Merge' in line:
            filedata[i] =  "Merge \"" + out_file_name + ".brep\";\n\n"
        if 'mg_wall' in line:
            if shape_name == 'Cut':
                import re
                regex = r"\{(.*?)\}"
                matches = re.findall(regex, line, re.MULTILINE | re.DOTALL)
            filedata[i] = filedata[i].replace("\"mg_wall\"", "1")
        if 'mg_farfield' in line:
            filedata[i] = filedata[i].replace("\"mg_farfield\"", "9")
        if 'mg_interog' in line:
            filedata[i] = filedata[i].replace("\"mg_interog\"", "11")
        if 'mg_volume' in line:
            filedata[i] = filedata[i].replace("\"mg_volume\"", "4")

    filedata.append('Mesh.MshFileVersion = 2.2;\n')
    filedata.append('Mesh.MeshSizeExtendFromBoundary = 0;\n')
    filedata.append('Mesh.RandomFactor = 1e-6;\n\n')

    filedata.append('lc = 0.0025;\n')
    filedata.append('Field[1] = Distance;\n')
    if shape_name == 'Cut':
        filedata.append('Field[1].SurfacesList = {' + matches[0] + '};\n')
        filedata.append('Field[1].NumPointsPerCurve = 200;\n')
    elif shape_name == 'Box':
        filedata.append('Point(111)={' + str(cx) + ', ' + str(cy) + ', ' + str(cz) + '};\n')
        filedata.append('Field[1].NodesList = {111};\n')
    filedata.append('Field[2] = MathEval;\n')
    filedata.append('Field[2].F = Sprintf("F1/5 + %g", lc);\n')
    filedata.append('Background Field = 2;\n')

    # Write the file out again.
    with open(out_file_name + '.geo', 'w') as file:
        for line in filedata:
            file.write(line)
